/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
       // Get the function signature from the calldata
    0x00 calldataload        // [calldata @ 0x00]
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]

    // Check if the function signature in the calldata is
    // a match to our function definition.
    dup1
    __FUNC_SIG(balanceOf) eq balanceOfJump jumpi
    dup1
    __FUNC_SIG(withdraw) eq withdrawJump jumpi

    // defacto / fallback deposit
    //need the equivalent of a mapping from address to balance
    //but since its only a mapping, we can use it for a slot no
    caller
    sload
    callvalue
    add         //potential for overflow here, this is unchecked
    caller
    sstore
    0x00 0x00 return


    balanceOfJump:
        caller
        sload
        0x00 mstore
        0x20 0x00 return

    withdrawJump:
        0x04 calldataload //amount that was passed in
        caller
        sload
        dup2
        dup2
        eq
        continueTransferJump
        jumpi
        pop dup2 dup2
        gt
        iszero notEnoughBalanceJump jumpi

    continueTransferJump:        

        //update state
        0x04 calldataload
        caller
        sload
        sub
        caller
        sstore

        

        0x00
        0x00
        0x00
        0x00
        0x04 calldataload
        caller
        gas
        call /* */

        //0x00
        //caller
        //sstore
        stop
    
    notEnoughBalanceJump:
        0x10
        0x00 mstore
        0x20 0x00 revert


}