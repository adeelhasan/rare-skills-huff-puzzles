
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // Get the function signature from the calldata
    0x00 calldataload        // [calldata @ 0x00]
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]

    // Check if the function signature in the calldata is
    // a match to our function definition.
    __FUNC_SIG(add1)
    eq 
    add_1 jumpi

    // Revert if no function signature matched
    0x00 0x00 revert

    // Create a jump label
    add_1:
        0x04 calldataload    // [input_num]
        0x01           // [the number 1 for addition]
        add
        0x00 mstore          // copy to memory, padded left
        0x20 0x00 return
}
