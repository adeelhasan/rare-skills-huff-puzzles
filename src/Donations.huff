/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
       // Get the function signature from the calldata
    0x00 calldataload        // [calldata @ 0x00]
    0xE0 shr                 // [func_sig (calldata @ 0x00 >> 0xE0)]

    // Check if the function signature in the calldata is
    // a match to our function definition.
    __FUNC_SIG(donated)
    eq 
    donatedJump jumpi

    // no function matched, if there is some callvalue, then associate record that 
    callvalue
    0x00
    gt donate jumpi

    donate:
        //need the equivalent of a mapping from address to balance
        //but since its only a mapping, we can use it for a slot no
        caller
        sload
        callvalue
        add
        caller
        sstore
        stop


    donatedJump:
        0x04 calldataload //address that was passed in, why no masking here
        sload
        0x00 mstore
        0x20 0x00 return

}